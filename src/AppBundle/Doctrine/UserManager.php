<?php

/**
 * Created by PhpStorm.
 * User: sergio
 * Date: 16/08/15
 * Time: 22:07.
 */
namespace AppBundle\Doctrine;

use AppBundle\Entity\User;
use Doctrine\Common\Persistence\ObjectManager;
use FOS\UserBundle\Doctrine\UserManager as BaseUserManager;
use FOS\UserBundle\Model\UserInterface;
use FOS\UserBundle\Util\CanonicalizerInterface;
use Symfony\Component\Security\Core\Encoder\EncoderFactoryInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;

class UserManager extends BaseUserManager
{
    /**
     * @var
     */
    private $idp;

    /**
     * Constructor.
     *
     * @param EncoderFactoryInterface $encoderFactory
     * @param CanonicalizerInterface  $usernameCanonicalizer
     * @param CanonicalizerInterface  $emailCanonicalizer
     * @param ObjectManager           $om
     * @param string                  $class
     */
    public function __construct(
        EncoderFactoryInterface $encoderFactory,
        CanonicalizerInterface $usernameCanonicalizer,
        CanonicalizerInterface $emailCanonicalizer,
        ObjectManager $om,
        $class,
        $idp
    ) {
        parent::__construct($encoderFactory, $usernameCanonicalizer, $emailCanonicalizer, $om, $class);
        $this->idp = $idp;
    }

    /**
     * Returns an empty user instance.
     *
     * @return UserInterface
     */
    public function createUser()
    {
        return parent::createUser(); // TODO: Change the autogenerated stub
    }

    /**
     * Updates a user.
     *
     * @param UserInterface $user
     * @param Boolean       $andFlush Whether to flush the changes (default true)
     */
    public function updateUser(UserInterface $user, $andFlush = true)
    {
        if ($user instanceof User and !$user->getOrganization()) {
            $organization = $this->objectManager->getRepository('AppBundle:Organization')->findOneBy(['code' => $this->idp]);
            if (!$organization) {
                throw new UnsupportedUserException('Default organization not found: '.$this->idp);
            }
            $user->setOrganization($organization);
        }
        parent::updateUser($user, $andFlush);
    }
}
